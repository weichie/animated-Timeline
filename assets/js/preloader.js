(function() {
  var AjaxMonitor, Bar, DocumentMonitor, ElementMonitor, ElementTracker, EventLagMonitor, Evented, Events, NoTargetError, Pace, RequestIntercept, SOURCE_KEYS, Scaler, SocketRequestTracker, XHRRequestTracker, animation, avgAmplitude, bar, cancelAnimation, cancelAnimationFrame, defaultOptions, extend, extendNative, getFromDOM, getIntercept, handlePushState, ignoreStack, init, now, options, requestAnimationFrame, result, runAnimation, scalers, shouldIgnoreURL, shouldTrack, source, sources, uniScaler, _WebSocket, _XDomainRequest, _XMLHttpRequest, _i, _intercept, _len, _pushState, _ref, _ref1, _replaceState,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  defaultOptions = {
    catchupTime: 100,
    initialRate: .03,
    minTime: 250,
    ghostTime: 100,
    maxProgressPerFrame: 20,
    easeFactor: 1.25,
    startOnPageLoad: true,
    restartOnPushState: true,
    restartOnRequestAfter: 500,
    target: 'body',
    elements: {
      checkInterval: 100,
      selectors: ['body']
    },
    eventLag: {
      minSamples: 10,
      sampleCount: 3,
      lagThreshold: 3
    },
    ajax: {
      trackMethods: ['GET'],
      trackWebSockets: true,
      ignoreURLs: []
    }
  };

  now = function() {
    var _ref;
    return (_ref = typeof performance !== "undefined" && performance !== null ? typeof performance.now === "function" ? performance.now() : void 0 : void 0) != null ? _ref : +(new Date);
  };

  requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

  cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

  if (requestAnimationFrame == null) {
    requestAnimationFrame = function(fn) {
      return setTimeout(fn, 50);
    };
    cancelAnimationFrame = function(id) {
      return clearTimeout(id);
    };
  }

  runAnimation = function(fn) {
    var last, tick;
    last = now();
    tick = function() {
      var diff;
      diff = now() - last;
      if (diff >= 33) {
        last = now();
        return fn(diff, function() {
          return requestAnimationFrame(tick);
        });
      } else {
        return setTimeout(tick, 33 - diff);
      }
    };
    return tick();
  };

  result = function() {
    var args, key, obj;
    obj = arguments[0], key = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    if (typeof obj[key] === 'function') {
      return obj[key].apply(obj, args);
    } else {
      return obj[key];
    }
  };

  extend = function() {
    var key, out, source, sources, val, _i, _len;
    out = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      if (source) {
        for (key in source) {
          if (!__hasProp.call(source, key)) continue;
          val = source[key];
          if ((out[key] != null) && typeof out[key] === 'object' && (val != null) && typeof val === 'object') {
            extend(out[key], val);
          } else {
            out[key] = val;
          }
        }
      }
    }
    return out;
  };

  avgAmplitude = function(arr) {
    var count, sum, v, _i, _len;
    sum = count = 0;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      v = arr[_i];
      sum += Math.abs(v);
      count++;
    }
    return sum / count;
  };

  getFromDOM = function(key, json) {
    var data, e, el;
    if (key == null) {
      key = 'options';
    }
    if (json == null) {
      json = true;
    }
    el = document.querySelector("[data-pace-" + key + "]");
    if (!el) {
      return;
    }
    data = el.getAttribute("data-pace-" + key);
    if (!json) {
      return data;
    }
    try {
      return JSON.parse(data);
    } catch (_error) {
      e = _error;
      return typeof console !== "undefined" && console !== null ? console.error("Error parsing inline pace options", e) : void 0;
    }
  };

  Evented = (function() {
    function Evented() {}

    Evented.prototype.on = function(event, handler, ctx, once) {
      var _base;
      if (once == null) {
        once = false;
      }
      if (this.bindings == null) {
        this.bindings = {};
      }
      if ((_base = this.bindings)[event] == null) {
        _base[event] = [];
      }
      return this.bindings[event].push({
        handler: handler,
        ctx: ctx,
        once: once
      });
    };

    Evented.prototype.once = function(event, handler, ctx) {
      return this.on(event, handler, ctx, true);
    };

    Evented.prototype.off = function(event, handler) {
      var i, _ref, _results;
      if (((_ref = this.bindings) != null ? _ref[event] : void 0) == null) {
        return;
      }
      if (handler == null) {
        return delete this.bindings[event];
      } else {
        i = 0;
        _results = [];
        while (i < this.bindings[event].length) {
          if (this.bindings[event][i].handler === handler) {
            _results.push(this.bindings[event].splice(i, 1));
          } else {
            _results.push(i++);
          }
        }
        return _results;
      }
    };

    Evented.prototype.trigger = function() {
      var args, ctx, event, handler, i, once, _ref, _ref1, _results;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if ((_ref = this.bindings) != null ? _ref[event] : void 0) {
        i = 0;
        _results = [];
        while (i < this.bindings[event].length) {
          _ref1 = this.bindings[event][i], handler = _ref1.handler, ctx = _ref1.ctx, once = _ref1.once;
          handler.apply(ctx != null ? ctx : this, args);
          if (once) {
            _results.push(this.bindings[event].splice(i, 1));
          } else {
            _results.push(i++);
          }
        }
        return _results;
      }
    };

    return Evented;

  })();

  Pace = window.Pace || {};

  window.Pace = Pace;

  extend(Pace, Evented.prototype);

  options = Pace.options = extend({}, defaultOptions, window.paceOptions, getFromDOM());

  _ref = ['ajax', 'document', 'eventLag', 'elements'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    source = _ref[_i];
    if (options[source] === true) {
      options[source] = defaultOptions[source];
    }
  }

  NoTargetError = (function(_super) {
    __extends(NoTargetError, _super);

    function NoTargetError() {
      _ref1 = NoTargetError.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return NoTargetError;

  })(Error);

  Bar = (function() {
    function Bar() {
      this.progress = 0;
    }

    Bar.prototype.getElement = function() {
      var targetElement;
      if (this.el == null) {
        targetElement = document.querySelector(options.target);
        if (!targetElement) {
          throw new NoTargetError;
        }
        this.el = document.createElement('div');
        this.el.className = "pace pace-active";
        document.body.className = document.body.className.replace(/pace-done/g, '');
        document.body.className += ' pace-running';
        this.el.innerHTML = '<div class="pace-progress">\n  <div style="max-width:300px; margin:auto; height: 70px; overflow:hidden;"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 1138 250" enable-background="new 0 0 1138 250" xml:space="preserve"> <g id="OUTLINE" style="opacity:0;"> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M980.2,149.5c1.2,6,1.7,10.5,3.1,14.7c2.4,7.1,9.2,11.6,15.5,10.6 c6.2-0.9,10.4-7.3,6.8-11.1c-6.4-7.1-5.8-15-3.1-22.7c7.5-21.6,15.6-43,23.5-64.4c4.7-13,9.6-26,14-39c0.5-1.4-1-4.8-2.2-5.1 c-10-3.2-21.1,2.5-24.7,12.5c-8,22.6-16.3,45.2-23.6,68C985.4,125.2,983.1,138,980.2,149.5z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M430.2,106c-4.6-4.3-8.1-7.7-11.8-11c-3.2-2.8-6.5-2.7-9.8-0.1 c-3.8,2.9-7.5,5.7-11.5,8.4c-9.2,6.2-6.5,6.7-14.2-0.9c-5.5-5.3-6.5-5.6-13.2-2.3c-1,0.5-2,1.1-3,1.7c-6.2,3.4-7.3,6-4.2,12.3 c3.8,7.6,4,15.5,2,23.3c-2.6,10.4-5.9,20.6-9,30.8c-1.5,4.9,0.5,8.3,5.6,7.6c3.3-0.5,7.1-2.2,9.5-4.5c6.3-6.1,10.3-13.9,12.1-22.4 c3.1-14,9.1-26.4,18.6-37.3c2.8-3.3,5-3.1,8.4-0.9c2.6,1.6,6.4,3,9,2.3C422.5,112,425.7,108.9,430.2,106z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M322.1,98c-9.5,0.4-15.7,5.3-20,12.1 c-10.2,16.1-12.7,33.9-7.5,51.9c4.2,14.4,9.9,16.8,22.9,8.5c0.6-0.4,0.9-1,1.5-1.3c4.1-2.1,4.3-5.4,2.5-9 c-5.3-10.3-4.4-21-1.9-31.7c1.9-8.3,4.3-16.5,6.3-24.8C326.9,100.1,325.9,97.5,322.1,98z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M328.8,46c-6.7,0-12.7,5.3-12.7,11.1c0,7.3,6.6,13.6,14.2,13.6 c6.6,0,12.7-5.5,12.7-11.5C343,52.4,336.2,46,328.8,46z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M711.1,161.9c-5.7,2.8-10.6,5.1-15.3,7.7 c-15.5,8.4-30.5,5.7-44.9-2.6c-10.7-6.2-13.2-16.8-11.5-28.1c2.7-17.9,14.2-29,29.8-36.9c10.3-5.2,20.9-7.4,32.3-6.8 c8.6,0.4,16.8,2.9,23.3,7.9c6.8,5.2,12.3,6.2,19.2,0.8c1.6-1.3,5.9-1.6,7-0.5c1.6,1.8,1.9,5.1,2.1,7.8c0.1,1.9-0.8,3.9-1.3,5.7 c-7.5,25.1-15.3,50.2-27.7,73.5c-7.2,13.5-14.8,26.9-28.4,35.2c-12.3,7.6-26.1,6.2-32.3-8.3c-3.3-7.7-5.3-15.9-7.1-24.1 c-1.2-5.5,2.1-10.3,6.5-11c9.1-1.4,13.6,1.6,15.3,8.9c1.5,6.8,3.5,13.5,6,20c1.6,4.2,4.4,4.4,6.9,0.6c8.9-13.7,16.1-28.2,20.1-44.1 C711.4,166.1,711.1,164.8,711.1,161.9z M726.4,115.5c-0.9-0.4-1.1-0.5-1.2-0.5c-0.8,0.2-1.6,0.3-2.3,0.7 c-5.5,2.8-11.1,2.5-16.9,0.9c-8.3-2.3-16.6-4.4-25-6.4c-5.3-1.3-9.6,0.1-12.3,5c-6.1,11-9,22.7-3.6,34.7 c4.9,10.9,17.4,17.3,28.8,10.1c5.1-3.3,9.8-7.6,13.8-12.2C715.8,138.2,722.3,127.6,726.4,115.5z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M849.3,109.6c3.9,0.5,7.3,0.9,10.7,1.5c2.7,0.5,4.7,1.7,3.3,5.1 c-4.7,10.9-9.5,21.7-13.9,32.7c-2,5-3.2,10.3-4.3,15.6c-0.4,1.9,0.9,4.1,1,6.2c0.1,1.6,0.3,3.9-0.6,4.8c-5,4.9-21.9,5.3-23.8-5.5 c-0.3-1.8,0.1-3.8,0.3-5.7c0.3-2.3,0.7-4.5,1-6.8c-2.4,0.6-4.9,0.9-7.2,1.8c-8.2,3.5-16.1,7.9-24.5,10.6 c-12.1,3.9-23.7-0.2-27.8-9.2c-4.6-10.1-5.3-20.6,0-30.7c9.1-17.1,23.8-26.9,42.1-31.9c11.5-3.1,22.7-2.4,33.9,1.1 C845.7,101,848.2,103.9,849.3,109.6z M836.6,116.5c-8.5-2.5-15.8-5.3-23.3-6.7c-5-0.9-10.7-0.9-15.4,0.8 c-13,4.5-18.4,27.1-10.4,39.3c3.9,6,8.9,9.4,16,3.1c8-7.1,15.2-15,22.5-22.8C829.9,125.8,833.1,120.9,836.6,116.5z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M516,71.7c-2.1,4.3-4.2,8.5-6.4,12.7c-3.8,7.3-4.4,14.2-0.1,21.8 c5.5,10,9.1,20.9,9.5,32.6c0.4,10.3-5.9,17-12.9,23c-7.9,6.6-16.5,12.1-27,14.1c-11.1,2.1-20.5-2.1-29.1-8.3 c-8.7-6.2-15-14.3-18.9-24.4c-1.8-4.6-0.1-8,2.6-11.4c0.9-1.2,2.1-2.1,3.2-3.2c4.9-4.8,6.9-5,12-0.3c3.1,2.9,5.2,4.1,8-0.5 c7.8-12.9,17-25,23.8-38.4c7.2-14.4,19.7-17.2,33.4-18.9C514.4,70.6,515,71.2,516,71.7z M498.6,139.9c-1.5-4.5-3.4-11.2-5.8-17.6 c-1.5-4-4.8-5.3-8.1-1.8c-7.1,7.4-14.2,14.8-20.8,22.6c-2,2.3-2.2,5.8,0.9,8.3c4.2,3.4,8.2,7.2,12.6,10.3c3.3,2.3,7.4,3.5,10.8,0.6 C494.3,157.1,498.1,150.5,498.6,139.9z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M906.4,132c-3.4,4.3-3.2,11.6,0.2,16.2c6.4,8.6,18,11.4,27.8,6.8 c4.9-2.3,9.7-4.7,14.7-6.8c1.4-0.6,3.2-0.2,4.8-0.2c0,1.8,0.7,4-0.1,5.5c-4.9,10.2-12.7,17.3-23.6,20.6 c-13.8,4.2-27.2,3.6-38.9-6.1c-8.3-6.9-12.2-16.3-13.3-26.8c-2.2-20.3,12.9-37.6,28.7-44.1c13.5-5.6,27.6-5.4,41.3-0.6 c5.9,2.1,10.7,6.4,13.5,12.2c3.2,6.4,0.1,11.9-3.8,16.8c-6.6,8.4-16.2,10.6-26.1,11.5C922.9,137.5,914.3,136.4,906.4,132z M907.8,115.4c2.7,1,4.9,1.7,6.9,2.6c5.4,2.7,10.7,5.5,16,8.2c3.7,1.9,6.5,0.1,8.3-2.6c2-3,2.8-6.8-1.1-9.1 c-5-2.9-10.1-5.5-15.4-7.7C914.6,103.8,908.5,107.8,907.8,115.4z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M227.1,132.4c-5.3,13.4,4.6,23.4,17.1,24.4 c4.8,0.4,9.9-1.6,14.6-3.3c4.1-1.4,7.9-4,12-5.7c1.4-0.6,3.9-0.4,4.7,0.5c0.8,0.9,0.9,3.4,0.2,4.7c-4.8,10-12.5,17.2-23.1,20.6 c-12.2,3.9-24.2,3.7-35.8-3c-13-7.5-22.6-32.3-14-48.8c9.8-18.8,24.5-28.2,45.4-29c9.1-0.3,17.7,1.2,25.6,5.6 c4.9,2.7,8.7,6.6,10,12.2c2,8.5-3.1,14.3-9,18.8c-9.8,7.3-21.5,8.3-33.3,6.8C236.8,135.7,232.2,133.8,227.1,132.4z M262.2,118.4 c-0.4-0.6-0.9-2-1.9-3c-5.9-5.7-13.3-8.5-21.3-9.4c-4.6-0.5-9.3,3.8-9.7,8.1c-0.1,0.7,0.9,1.9,1.7,2.3c2.4,1.1,5.1,1.6,7.4,2.8 c4.5,2.2,8.8,4.9,13.4,6.8C257.1,128.1,262,124.7,262.2,118.4z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M571.3,131.9c-6.5,10,2,21,11.2,24.2c8.8,3,16.3-0.9,23.9-4.2 c2.5-1.1,4.8-2.8,7.4-3.7c1.6-0.6,3.6-0.2,5.4-0.3c-0.1,1.9,0.3,4-0.4,5.6c-4.8,10.5-13,17.5-24,20.6c-15.8,4.5-30.6,3-42.2-10.3 c-8.4-9.6-12.5-28.6-6.4-41.5c7.8-16.6,20.8-26.1,38.1-28.9c11.3-1.9,23.2-1.1,33.5,5.2c9.8,6,14,16.5,4.9,26.9 c-7.1,8.1-16.6,10.5-26.7,11.2C587.5,137.4,579.1,136.4,571.3,131.9z M583.3,105.7c-4.7,0.6-8.4,2-9.9,6.2c-0.7,2-1.9,5.2,2.9,4.3 c1.2-0.2,2.7,0.9,4,1.6c5.3,2.9,10.3,6.3,15.8,8.4c2.1,0.8,5.9-0.9,7.9-2.7c2.2-2,3.4-5.4,0.2-8.2 C598,110.1,590.7,107.4,583.3,105.7z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M1072.7,131.8c-4.9,4.8-2.7,13.2,2.1,18.5 c6.4,7.1,16.7,9.3,28,3.8c3.8-1.9,7.6-4,11.5-5.6c1.8-0.7,3.9-0.5,5.9-0.7c-0.1,2.2,0.7,5-0.3,6.4c-3.8,5.1-7.6,10.7-12.7,14.4 c-16.1,11.8-39.5,10.3-51.9-3.2c-14-15.2-15.7-38.2,0.4-55.7c12.6-13.8,28.3-18.2,46-16.5c8.8,0.9,17.5,3.3,23.6,10.7 c5.3,6.4,4.8,13.8-0.5,20.7c-6.3,8.3-15.3,10.9-24.8,11.9C1090.6,137.5,1081.3,137.2,1072.7,131.8z M1074.1,115.6 c3.1,1,5.3,1.5,7.3,2.4c5.4,2.6,10.6,5.5,16,8.1c3.5,1.7,6.1,0.4,8.1-2.8c2.2-3.5,2.2-6.9-1.5-8.9c-5.6-3.1-11.3-6.1-17.4-8.1 C1080.5,104.2,1072.7,109.2,1074.1,115.6z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M980.2,149.5c2.8-11.5,5.2-24.3,9.2-36.7 c7.4-22.8,15.7-45.4,23.6-68c3.5-10,14.6-15.7,24.7-12.5c1.2,0.4,2.7,3.8,2.2,5.1c-4.4,13.1-9.2,26.1-14,39 c-7.8,21.5-16,42.8-23.5,64.4c-2.7,7.7-3.3,15.6,3.1,22.7c3.5,3.9-0.7,10.2-6.8,11.1c-6.2,0.9-13.1-3.5-15.5-10.6 C981.9,160,981.4,155.5,980.2,149.5z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M430.2,106c-4.5,2.9-7.7,6-11.4,7c-2.6,0.7-6.4-0.7-9-2.3 c-3.4-2.1-5.6-2.4-8.4,0.9c-9.4,10.9-15.5,23.2-18.6,37.3c-1.9,8.5-5.8,16.3-12.1,22.4c-2.4,2.3-6.1,4.1-9.5,4.5 c-5.1,0.7-7.1-2.7-5.6-7.6c3.1-10.2,6.4-20.4,9-30.8c1.9-7.8,1.7-15.7-2-23.3c-3.1-6.3-2-8.9,4.2-12.3c1-0.6,2-1.2,3-1.7 c6.8-3.2,7.8-3,13.2,2.3c7.7,7.5,5.1,7.1,14.2,0.9c3.9-2.7,7.7-5.5,11.5-8.4c3.4-2.6,6.7-2.7,9.8,0.1 C422.1,98.3,425.6,101.7,430.2,106z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M322.1,98c3.8-0.5,4.7,2.1,3.9,5.7c-2,8.3-4.4,16.5-6.3,24.8 c-2.5,10.7-3.5,21.4,1.9,31.7c1.9,3.7,1.7,6.9-2.5,9c-0.6,0.3-1,0.9-1.5,1.3c-12.9,8.3-18.7,5.8-22.9-8.5 c-5.2-18-2.7-35.8,7.5-51.9C306.5,103.3,312.6,98.4,322.1,98z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M328.8,46c7.4-0.1,14.2,6.3,14.2,13.3c0,6-6.1,11.4-12.7,11.5 c-7.6,0-14.2-6.2-14.2-13.6C316.1,51.4,322.1,46.1,328.8,46z"/> <path fill="#FFFFFF" stroke="#333333" stroke-miterlimit="10" d="M207,52c-4.2-18.5-17.3-28.5-33.7-34.7c-10.8-4-22.1-6.9-33.4-8.9 c-10-1.8-20.4-2.4-30.6-2.1c-10.8,0.4-21.5,2.3-32.2,3.8C59.7,12.4,43,16.8,27.6,25.8C11.9,34.9,9.7,50.4,22.8,63 C30.5,70.3,40,74.1,50,76.8c10.3,2.9,20.8,4.7,31-0.1c2.8-1.3,5.5-3.2,7.4-5.5c1.3-1.6,2.5-4.4-1.8-5.3C79,64.2,71.5,62,64,60 c-7.7-2-15.7-3.5-21.7-9.3c-5.6-5.4-4.8-13.3,2.3-16.1c7.1-2.8,14.8-4.5,22.4-5.8c19.7-3.4,39.6-3.9,59.5-1.8 c1.4,0.1,3.8,1.6,3.7,2.1c-0.3,1.7-1.2,4.3-2.4,4.7c-5.6,1.8-8,6.2-9.6,11C114,57.2,110,69.6,106.3,82c-1.2,3.9-2.7,5.7-6.8,4 c-2.4-1-4.8-2.2-7.3-2.8c-1.6-0.4-4.1-0.5-5.1,0.4c-4.6,4.1-8.9,8.6-13.8,13.6c4.2,3,7.5,6,11.4,8c3.9,2,8.2,3.1,12.1,4.5 c-2.7,13.6-6,27.1-8,40.8c-1.6,10.8-1.9,21.9,2.3,32.4c5.3,13.3,19.9,16.8,29.5,6.3c6.1-6.6,10.5-14.6,15.7-22.2 c-6.9,0.4-12.1,0.7-17.3,0.9c-3.6,0.1-5.2-2.7-4.8-5.4c2.4-15.5,5.3-30.9,7.9-46.3c0.8-4.5,3.3-5.6,7.7-5.6 c20,0,39.2-3.6,56.9-13.4C203.6,88.1,211.3,70.7,207,52z M170.8,87.4c-9.2,6.4-19.9,9.8-31.3,9.6c-2.6-0.1-5.2-0.8-8.8-1.3 c0.6-3.6,0.6-7.2,1.7-10.3c6.3-16.6,13.1-33.1,19.5-49.7c1.4-3.7,3.5-4.4,6.8-2.6c12.5,6.8,21.8,16,23.6,31 C183.5,74.4,178.3,82.1,170.8,87.4z"/> </g> <g id="MASK_1_"> </g> <g id="Layer_4"> <g> <defs> <rect xmlns="http://www.w3.org/2000/svg" transform="translate(0,230)" id="SVGID_1_" width="1138" height="250"/> </defs> <clipPath id="SVGID_2_"> <use xlink:href="#SVGID_1_" overflow="visible"/> </clipPath> <g clip-path="url(#SVGID_2_)"> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M980.2,149.3c1.2,6,1.7,10.5,3.1,14.7 c2.4,7.1,9.2,11.6,15.5,10.6c6.2-0.9,10.4-7.3,6.8-11.1c-6.4-7.1-5.8-15-3.1-22.7c7.5-21.6,15.6-43,23.5-64.4 c4.7-13,9.6-26,14-39c0.5-1.4-1-4.8-2.2-5.1c-10-3.2-21.1,2.5-24.7,12.5c-8,22.6-16.3,45.2-23.6,68 C985.4,125,983.1,137.8,980.2,149.3z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M430.2,105.8c-4.6-4.3-8.1-7.7-11.8-11 c-3.2-2.8-6.5-2.7-9.8-0.1c-3.8,2.9-7.5,5.7-11.5,8.4c-9.2,6.2-6.5,6.7-14.2-0.9c-5.5-5.3-6.5-5.6-13.2-2.3c-1,0.5-2,1.1-3,1.7 c-6.2,3.4-7.3,6-4.2,12.3c3.8,7.6,4,15.5,2,23.3c-2.6,10.4-5.9,20.6-9,30.8c-1.5,4.9,0.5,8.3,5.6,7.6c3.3-0.5,7.1-2.2,9.5-4.5 c6.3-6.1,10.3-13.9,12.1-22.4c3.1-14,9.1-26.4,18.6-37.3c2.8-3.3,5-3.1,8.4-0.9c2.6,1.6,6.4,3,9,2.3 C422.5,111.8,425.7,108.7,430.2,105.8z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M322.1,97.8c-9.5,0.4-15.7,5.3-20,12.1 c-10.2,16.1-12.7,33.9-7.5,51.9c4.2,14.4,9.9,16.8,22.9,8.5c0.6-0.4,0.9-1,1.5-1.3c4.1-2.1,4.3-5.4,2.5-9 c-5.3-10.3-4.4-21-1.9-31.7c1.9-8.3,4.3-16.5,6.3-24.8C326.9,99.9,325.9,97.3,322.1,97.8z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M328.8,45.8c-6.7,0-12.7,5.3-12.7,11.1 c0,7.3,6.6,13.6,14.2,13.6c6.6,0,12.7-5.5,12.7-11.5C343,52.2,336.2,45.8,328.8,45.8z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M711.1,161.7c-5.7,2.8-10.6,5.1-15.3,7.7 c-15.5,8.4-30.5,5.7-44.9-2.6c-10.7-6.2-13.2-16.8-11.5-28.1c2.7-17.9,14.2-29,29.8-36.9c10.3-5.2,20.9-7.4,32.3-6.8 c8.6,0.4,16.8,2.9,23.3,7.9c6.8,5.2,12.3,6.2,19.2,0.8c1.6-1.3,5.9-1.6,7-0.5c1.6,1.8,1.9,5.1,2.1,7.8c0.1,1.9-0.8,3.9-1.3,5.7 c-7.5,25.1-15.3,50.2-27.7,73.5c-7.2,13.5-14.8,26.9-28.4,35.2c-12.3,7.6-26.1,6.2-32.3-8.3c-3.3-7.7-5.3-15.9-7.1-24.1 c-1.2-5.5,2.1-10.3,6.5-11c9.1-1.4,13.6,1.6,15.3,8.9c1.5,6.8,3.5,13.5,6,20c1.6,4.2,4.4,4.4,6.9,0.6 c8.9-13.7,16.1-28.2,20.1-44.1C711.4,165.9,711.1,164.6,711.1,161.7z M726.4,115.3c-0.9-0.4-1.1-0.5-1.2-0.5 c-0.8,0.2-1.6,0.3-2.3,0.7c-5.5,2.8-11.1,2.5-16.9,0.9c-8.3-2.3-16.6-4.4-25-6.4c-5.3-1.3-9.6,0.1-12.3,5 c-6.1,11-9,22.7-3.6,34.7c4.9,10.9,17.4,17.3,28.8,10.1c5.1-3.3,9.8-7.6,13.8-12.2C715.8,138,722.3,127.4,726.4,115.3z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M849.3,109.4c3.9,0.5,7.3,0.9,10.7,1.5c2.7,0.5,4.7,1.7,3.3,5.1 c-4.7,10.9-9.5,21.7-13.9,32.7c-2,5-3.2,10.3-4.3,15.6c-0.4,1.9,0.9,4.1,1,6.2c0.1,1.6,0.3,3.9-0.6,4.8c-5,4.9-21.9,5.3-23.8-5.5 c-0.3-1.8,0.1-3.8,0.3-5.7c0.3-2.3,0.7-4.5,1-6.8c-2.4,0.6-4.9,0.9-7.2,1.8c-8.2,3.5-16.1,7.9-24.5,10.6 c-12.1,3.9-23.7-0.2-27.8-9.2c-4.6-10.1-5.3-20.6,0-30.7c9.1-17.1,23.8-26.9,42.1-31.9c11.5-3.1,22.7-2.4,33.9,1.1 C845.7,100.8,848.2,103.7,849.3,109.4z M836.6,116.3c-8.5-2.5-15.8-5.3-23.3-6.7c-5-0.9-10.7-0.9-15.4,0.8 c-13,4.5-18.4,27.1-10.4,39.3c3.9,6,8.9,9.4,16,3.1c8-7.1,15.2-15,22.5-22.8C829.9,125.6,833.1,120.7,836.6,116.3z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M516,71.5c-2.1,4.3-4.2,8.5-6.4,12.7 c-3.8,7.3-4.4,14.2-0.1,21.8c5.5,10,9.1,20.9,9.5,32.6c0.4,10.3-5.9,17-12.9,23c-7.9,6.6-16.5,12.1-27,14.1 c-11.1,2.1-20.5-2.1-29.1-8.3c-8.7-6.2-15-14.3-18.9-24.4c-1.8-4.6-0.1-8,2.6-11.4c0.9-1.2,2.1-2.1,3.2-3.2c4.9-4.8,6.9-5,12-0.3 c3.1,2.9,5.2,4.1,8-0.5c7.8-12.9,17-25,23.8-38.4c7.2-14.4,19.7-17.2,33.4-18.9C514.4,70.4,515,71,516,71.5z M498.6,139.7 c-1.5-4.5-3.4-11.2-5.8-17.6c-1.5-4-4.8-5.3-8.1-1.8c-7.1,7.4-14.2,14.8-20.8,22.6c-2,2.3-2.2,5.8,0.9,8.3 c4.2,3.4,8.2,7.2,12.6,10.3c3.3,2.3,7.4,3.5,10.8,0.6C494.3,156.9,498.1,150.3,498.6,139.7z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M906.4,131.8c-3.4,4.3-3.2,11.6,0.2,16.2 c6.4,8.6,18,11.4,27.8,6.8c4.9-2.3,9.7-4.7,14.7-6.8c1.4-0.6,3.2-0.2,4.8-0.2c0,1.8,0.7,4-0.1,5.5c-4.9,10.2-12.7,17.3-23.6,20.6 c-13.8,4.2-27.2,3.6-38.9-6.1c-8.3-6.9-12.2-16.3-13.3-26.8c-2.2-20.3,12.9-37.6,28.7-44.1c13.5-5.6,27.6-5.4,41.3-0.6 c5.9,2.1,10.7,6.4,13.5,12.2c3.2,6.4,0.1,11.9-3.8,16.8c-6.6,8.4-16.2,10.6-26.1,11.5C922.9,137.3,914.3,136.3,906.4,131.8z M907.8,115.2c2.7,1,4.9,1.7,6.9,2.6c5.4,2.7,10.7,5.5,16,8.2c3.7,1.9,6.5,0.1,8.3-2.6c2-3,2.8-6.8-1.1-9.1 c-5-2.9-10.1-5.5-15.4-7.7C914.6,103.6,908.5,107.6,907.8,115.2z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M227.1,132.2c-5.3,13.4,4.6,23.4,17.1,24.4 c4.8,0.4,9.9-1.6,14.6-3.3c4.1-1.4,7.9-4,12-5.7c1.4-0.6,3.9-0.4,4.7,0.5c0.8,0.9,0.9,3.4,0.2,4.7c-4.8,10-12.5,17.2-23.1,20.6 c-12.2,3.9-24.2,3.7-35.8-3c-13-7.5-22.6-32.3-14-48.8c9.8-18.8,24.5-28.2,45.4-29c9.1-0.3,17.7,1.2,25.6,5.6 c4.9,2.7,8.7,6.6,10,12.2c2,8.5-3.1,14.3-9,18.8c-9.8,7.3-21.5,8.3-33.3,6.8C236.8,135.5,232.2,133.6,227.1,132.2z M262.2,118.2 c-0.4-0.6-0.9-2-1.9-3c-5.9-5.7-13.3-8.5-21.3-9.4c-4.6-0.5-9.3,3.8-9.7,8.1c-0.1,0.7,0.9,1.9,1.7,2.3c2.4,1.1,5.1,1.6,7.4,2.8 c4.5,2.2,8.8,4.9,13.4,6.8C257.1,127.9,262,124.5,262.2,118.2z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M571.3,131.7c-6.5,10,2,21,11.2,24.2c8.8,3,16.3-0.9,23.9-4.2 c2.5-1.1,4.8-2.8,7.4-3.7c1.6-0.6,3.6-0.2,5.4-0.3c-0.1,1.9,0.3,4-0.4,5.6c-4.8,10.5-13,17.5-24,20.6c-15.8,4.5-30.6,3-42.2-10.3 c-8.4-9.6-12.5-28.6-6.4-41.5c7.8-16.6,20.8-26.1,38.1-28.9c11.3-1.9,23.2-1.1,33.5,5.2c9.8,6,14,16.5,4.9,26.9 c-7.1,8.1-16.6,10.5-26.7,11.2C587.5,137.2,579.1,136.2,571.3,131.7z M583.3,105.5c-4.7,0.6-8.4,2-9.9,6.2 c-0.7,2-1.9,5.2,2.9,4.3c1.2-0.2,2.7,0.9,4,1.6c5.3,2.9,10.3,6.3,15.8,8.4c2.1,0.8,5.9-0.9,7.9-2.7c2.2-2,3.4-5.4,0.2-8.2 C598,109.9,590.7,107.2,583.3,105.5z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M1072.7,131.6c-4.9,4.8-2.7,13.2,2.1,18.5 c6.4,7.1,16.7,9.3,28,3.8c3.8-1.9,7.6-4,11.5-5.6c1.8-0.7,3.9-0.5,5.9-0.7c-0.1,2.2,0.7,5-0.3,6.4c-3.8,5.1-7.6,10.7-12.7,14.4 c-16.1,11.8-39.5,10.3-51.9-3.2c-14-15.2-15.7-38.2,0.4-55.7c12.6-13.8,28.3-18.2,46-16.5c8.8,0.9,17.5,3.3,23.6,10.7 c5.3,6.4,4.8,13.8-0.5,20.7c-6.3,8.3-15.3,10.9-24.8,11.9C1090.6,137.4,1081.3,137,1072.7,131.6z M1074.1,115.4 c3.1,1,5.3,1.5,7.3,2.4c5.4,2.6,10.6,5.5,16,8.1c3.5,1.7,6.1,0.4,8.1-2.8c2.2-3.5,2.2-6.9-1.5-8.9c-5.6-3.1-11.3-6.1-17.4-8.1 C1080.5,104,1072.7,109,1074.1,115.4z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M980.2,149.3c2.8-11.5,5.2-24.3,9.2-36.7 c7.4-22.8,15.7-45.4,23.6-68c3.5-10,14.6-15.7,24.7-12.5c1.2,0.4,2.7,3.8,2.2,5.1c-4.4,13.1-9.2,26.1-14,39 c-7.8,21.5-16,42.8-23.5,64.4c-2.7,7.7-3.3,15.6,3.1,22.7c3.5,3.9-0.7,10.2-6.8,11.1c-6.2,0.9-13.1-3.5-15.5-10.6 C981.9,159.8,981.4,155.3,980.2,149.3z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M430.2,105.8c-4.5,2.9-7.7,6-11.4,7c-2.6,0.7-6.4-0.7-9-2.3 c-3.4-2.1-5.6-2.4-8.4,0.9c-9.4,10.9-15.5,23.2-18.6,37.3c-1.9,8.5-5.8,16.3-12.1,22.4c-2.4,2.3-6.1,4.1-9.5,4.5 c-5.1,0.7-7.1-2.7-5.6-7.6c3.1-10.2,6.4-20.4,9-30.8c1.9-7.8,1.7-15.7-2-23.3c-3.1-6.3-2-8.9,4.2-12.3c1-0.6,2-1.2,3-1.7 c6.8-3.2,7.8-3,13.2,2.3c7.7,7.5,5.1,7.1,14.2,0.9c3.9-2.7,7.7-5.5,11.5-8.4c3.4-2.6,6.7-2.7,9.8,0.1 C422.1,98.1,425.6,101.5,430.2,105.8z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M322.1,97.8c3.8-0.5,4.7,2.1,3.9,5.7c-2,8.3-4.4,16.5-6.3,24.8 c-2.5,10.7-3.5,21.4,1.9,31.7c1.9,3.7,1.7,6.9-2.5,9c-0.6,0.3-1,0.9-1.5,1.3c-12.9,8.3-18.7,5.8-22.9-8.5 c-5.2-18-2.7-35.8,7.5-51.9C306.5,103.1,312.6,98.2,322.1,97.8z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M328.8,45.8c7.4-0.1,14.2,6.3,14.2,13.3c0,6-6.1,11.4-12.7,11.5 c-7.6,0-14.2-6.2-14.2-13.6C316.1,51.2,322.1,45.9,328.8,45.8z"/> <path fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M207,51.8c-4.2-18.5-17.3-28.5-33.7-34.7 c-10.8-4-22.1-6.9-33.4-8.9c-10-1.8-20.4-2.4-30.6-2.1C98.6,6.4,87.9,8.4,77.1,9.9C59.7,12.3,43,16.6,27.6,25.6 c-15.7,9.1-17.9,24.6-4.8,37.2C30.5,70.1,40,73.9,50,76.6c10.3,2.9,20.8,4.7,31-0.1c2.8-1.3,5.5-3.2,7.4-5.5 c1.3-1.6,2.5-4.4-1.8-5.3C79,64,71.5,61.8,64,59.8c-7.7-2-15.7-3.5-21.7-9.3c-5.6-5.4-4.8-13.3,2.3-16.1 c7.1-2.8,14.8-4.5,22.4-5.8c19.7-3.4,39.6-3.9,59.5-1.8c1.4,0.1,3.8,1.6,3.7,2.1c-0.3,1.7-1.2,4.3-2.4,4.7c-5.6,1.8-8,6.2-9.6,11 C114,57,110,69.4,106.3,81.8c-1.2,3.9-2.7,5.7-6.8,4c-2.4-1-4.8-2.2-7.3-2.8c-1.6-0.4-4.1-0.5-5.1,0.4C82.5,87.5,78.2,92,73.3,97 c4.2,3,7.5,6,11.4,8c3.9,2,8.2,3.1,12.1,4.5c-2.7,13.6-6,27.1-8,40.8c-1.6,10.8-1.9,21.9,2.3,32.4c5.3,13.3,19.9,16.8,29.5,6.3 c6.1-6.6,10.5-14.6,15.7-22.2c-6.9,0.4-12.1,0.7-17.3,0.9c-3.6,0.1-5.2-2.7-4.8-5.4c2.4-15.5,5.3-30.9,7.9-46.3 c0.8-4.5,3.3-5.6,7.7-5.6c20,0,39.2-3.6,56.9-13.4C203.6,87.9,211.3,70.5,207,51.8z M170.8,87.2c-9.2,6.4-19.9,9.8-31.3,9.6 c-2.6-0.1-5.2-0.8-8.8-1.3c0.6-3.6,0.6-7.2,1.7-10.3c6.3-16.6,13.1-33.1,19.5-49.7c1.4-3.7,3.5-4.4,6.8-2.6 c12.5,6.8,21.8,16,23.6,31C183.5,74.2,178.3,81.9,170.8,87.2z"/> </g> </g> </g> <g id="MASK" display="none"> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M904.2-21.5c1.2,6,1.7,10.5,3.1,14.7 c2.4,7.1,9.2,11.6,15.5,10.6c6.2-0.9,10.4-7.3,6.8-11.1c-6.4-7.1-5.8-15-3.1-22.7c7.5-21.6,15.6-43,23.5-64.4c4.7-13,9.6-26,14-39 c0.5-1.4-1-4.8-2.2-5.1c-10-3.2-21.1,2.5-24.7,12.5c-8,22.6-16.3,45.2-23.6,68C909.4-45.8,907.1-33,904.2-21.5z"/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M354.2-65c-4.6-4.3-8.1-7.7-11.8-11 c-3.2-2.8-6.5-2.7-9.8-0.1c-3.8,2.9-7.5,5.7-11.5,8.4c-9.2,6.2-6.5,6.7-14.2-0.9c-5.5-5.3-6.5-5.6-13.2-2.3c-1,0.5-2,1.1-3,1.7 c-6.2,3.4-7.3,6-4.2,12.3c3.8,7.6,4,15.5,2,23.3c-2.6,10.4-5.9,20.6-9,30.8c-1.5,4.9,0.5,8.3,5.6,7.6c3.3-0.5,7.1-2.2,9.5-4.5 c6.3-6.1,10.3-13.9,12.1-22.4c3.1-14,9.1-26.4,18.6-37.3c2.8-3.3,5-3.1,8.4-0.9c2.6,1.6,6.4,3,9,2.3C346.5-59,349.7-62.1,354.2-65z "/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M246.1-73c-9.5,0.4-15.7,5.3-20,12.1 C216-44.8,213.5-27,218.7-9c4.2,14.4,9.9,16.8,22.9,8.5c0.6-0.4,0.9-1,1.5-1.3c4.1-2.1,4.3-5.4,2.5-9c-5.3-10.3-4.4-21-1.9-31.7 c1.9-8.3,4.3-16.5,6.3-24.8C250.9-70.9,249.9-73.5,246.1-73z"/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M252.8-125c-6.7,0-12.7,5.3-12.7,11.1 c0,7.3,6.6,13.6,14.2,13.6c6.6,0,12.7-5.5,12.7-11.5C267-118.6,260.2-125,252.8-125z"/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M635.1-9.1c-5.7,2.8-10.6,5.1-15.3,7.7 c-15.5,8.4-30.5,5.7-44.9-2.6c-10.7-6.2-13.2-16.8-11.5-28.1c2.7-17.9,14.2-29,29.8-36.9c10.3-5.2,20.9-7.4,32.3-6.8 c8.6,0.4,16.8,2.9,23.3,7.9c6.8,5.2,12.3,6.2,19.2,0.8c1.6-1.3,5.9-1.6,7-0.5c1.6,1.8,1.9,5.1,2.1,7.8c0.1,1.9-0.8,3.9-1.3,5.7 c-7.5,25.1-15.3,50.2-27.7,73.5c-7.2,13.5-14.8,26.9-28.4,35.2c-12.3,7.6-26.1,6.2-32.3-8.3c-3.3-7.7-5.3-15.9-7.1-24.1 c-1.2-5.5,2.1-10.3,6.5-11c9.1-1.4,13.6,1.6,15.3,8.9c1.5,6.8,3.5,13.5,6,20c1.6,4.2,4.4,4.4,6.9,0.6c8.9-13.7,16.1-28.2,20.1-44.1 C635.4-4.9,635.1-6.2,635.1-9.1z M650.4-55.5c-0.9-0.4-1.1-0.5-1.2-0.5c-0.8,0.2-1.6,0.3-2.3,0.7c-5.5,2.8-11.1,2.5-16.9,0.9 c-8.3-2.3-16.6-4.4-25-6.4c-5.3-1.3-9.6,0.1-12.3,5c-6.1,11-9,22.7-3.6,34.7c4.9,10.9,17.4,17.3,28.8,10.1 c5.1-3.3,9.8-7.6,13.8-12.2C639.8-32.8,646.3-43.4,650.4-55.5z"/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M773.3-61.4c3.9,0.5,7.3,0.9,10.7,1.5 c2.7,0.5,4.7,1.7,3.3,5.1c-4.7,10.9-9.5,21.7-13.9,32.7c-2,5-3.2,10.3-4.3,15.6c-0.4,1.9,0.9,4.1,1,6.2c0.1,1.6,0.3,3.9-0.6,4.8 c-5,4.9-21.9,5.3-23.8-5.5c-0.3-1.8,0.1-3.8,0.3-5.7c0.3-2.3,0.7-4.5,1-6.8c-2.4,0.6-4.9,0.9-7.2,1.8c-8.2,3.5-16.1,7.9-24.5,10.6 c-12.1,3.9-23.7-0.2-27.8-9.2c-4.6-10.1-5.3-20.6,0-30.7c9.1-17.1,23.8-26.9,42.1-31.9c11.5-3.1,22.7-2.4,33.9,1.1 C769.7-70,772.2-67.1,773.3-61.4z M760.6-54.5c-8.5-2.5-15.8-5.3-23.3-6.7c-5-0.9-10.7-0.9-15.4,0.8c-13,4.5-18.4,27.1-10.4,39.3 c3.9,6,8.9,9.4,16,3.1c8-7.1,15.2-15,22.5-22.8C753.9-45.2,757.1-50.1,760.6-54.5z"/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M440-99.3c-2.1,4.3-4.2,8.5-6.4,12.7 c-3.8,7.3-4.4,14.2-0.1,21.8c5.5,10,9.1,20.9,9.5,32.6c0.4,10.3-5.9,17-12.9,23c-7.9,6.6-16.5,12.1-27,14.1 c-11.1,2.1-20.5-2.1-29.1-8.3c-8.7-6.2-15-14.3-18.9-24.4c-1.8-4.6-0.1-8,2.6-11.4c0.9-1.2,2.1-2.1,3.2-3.2c4.9-4.8,6.9-5,12-0.3 c3.1,2.9,5.2,4.1,8-0.5c7.8-12.9,17-25,23.8-38.4c7.2-14.4,19.7-17.2,33.4-18.9C438.4-100.4,439-99.8,440-99.3z M422.6-31.1 c-1.5-4.5-3.4-11.2-5.8-17.6c-1.5-4-4.8-5.3-8.1-1.8c-7.1,7.4-14.2,14.8-20.8,22.6c-2,2.3-2.2,5.8,0.9,8.3 c4.2,3.4,8.2,7.2,12.6,10.3c3.3,2.3,7.4,3.5,10.8,0.6C418.3-13.9,422.1-20.5,422.6-31.1z"/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M830.4-39c-3.4,4.3-3.2,11.6,0.2,16.2 c6.4,8.6,18,11.4,27.8,6.8c4.9-2.3,9.7-4.7,14.7-6.8c1.4-0.6,3.2-0.2,4.8-0.2c0,1.8,0.7,4-0.1,5.5C873-7.4,865.2-0.3,854.3,3 c-13.8,4.2-27.2,3.6-38.9-6.1c-8.3-6.9-12.2-16.3-13.3-26.8c-2.2-20.3,12.9-37.6,28.7-44.1c13.5-5.6,27.6-5.4,41.3-0.6 c5.9,2.1,10.7,6.4,13.5,12.2c3.2,6.4,0.1,11.9-3.8,16.8c-6.6,8.4-16.2,10.6-26.1,11.5C846.9-33.5,838.3-34.6,830.4-39z M831.8-55.6 c2.7,1,4.9,1.7,6.9,2.6c5.4,2.7,10.7,5.5,16,8.2c3.7,1.9,6.5,0.1,8.3-2.6c2-3,2.8-6.8-1.1-9.1c-5-2.9-10.1-5.5-15.4-7.7 C838.6-67.2,832.5-63.2,831.8-55.6z"/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M151.1-38.6c-5.3,13.4,4.6,23.4,17.1,24.4 c4.8,0.4,9.9-1.6,14.6-3.3c4.1-1.4,7.9-4,12-5.7c1.4-0.6,3.9-0.4,4.7,0.5c0.8,0.9,0.9,3.4,0.2,4.7c-4.8,10-12.5,17.2-23.1,20.6 c-12.2,3.9-24.2,3.7-35.8-3c-13-7.5-22.6-32.3-14-48.8c9.8-18.8,24.5-28.2,45.4-29c9.1-0.3,17.7,1.2,25.6,5.6 c4.9,2.7,8.7,6.6,10,12.2c2,8.5-3.1,14.3-9,18.8c-9.8,7.3-21.5,8.3-33.3,6.8C160.8-35.3,156.2-37.2,151.1-38.6z M186.2-52.6 c-0.4-0.6-0.9-2-1.9-3c-5.9-5.7-13.3-8.5-21.3-9.4c-4.6-0.5-9.3,3.8-9.7,8.1c-0.1,0.7,0.9,1.9,1.7,2.3c2.4,1.1,5.1,1.6,7.4,2.8 c4.5,2.2,8.8,4.9,13.4,6.8C181.1-42.9,186-46.3,186.2-52.6z"/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M495.3-39.1c-6.5,10,2,21,11.2,24.2 c8.8,3,16.3-0.9,23.9-4.2c2.5-1.1,4.8-2.8,7.4-3.7c1.6-0.6,3.6-0.2,5.4-0.3c-0.1,1.9,0.3,4-0.4,5.6c-4.8,10.5-13,17.5-24,20.6 c-15.8,4.5-30.6,3-42.2-10.3c-8.4-9.6-12.5-28.6-6.4-41.5c7.8-16.6,20.8-26.1,38.1-28.9c11.3-1.9,23.2-1.1,33.5,5.2 c9.8,6,14,16.5,4.9,26.9c-7.1,8.1-16.6,10.5-26.7,11.2C511.5-33.6,503.1-34.6,495.3-39.1z M507.3-65.3c-4.7,0.6-8.4,2-9.9,6.2 c-0.7,2-1.9,5.2,2.9,4.3c1.2-0.2,2.7,0.9,4,1.6c5.3,2.9,10.3,6.3,15.8,8.4c2.1,0.8,5.9-0.9,7.9-2.7c2.2-2,3.4-5.4,0.2-8.2 C522-60.9,514.7-63.6,507.3-65.3z"/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M996.7-39.2c-4.9,4.8-2.7,13.2,2.1,18.5 c6.4,7.1,16.7,9.3,28,3.8c3.8-1.9,7.6-4,11.5-5.6c1.8-0.7,3.9-0.5,5.9-0.7c-0.1,2.2,0.7,5-0.3,6.4c-3.8,5.1-7.6,10.7-12.7,14.4 c-16.1,11.8-39.5,10.3-51.9-3.2c-14-15.2-15.7-38.2,0.4-55.7c12.6-13.8,28.3-18.2,46-16.5c8.8,0.9,17.5,3.3,23.6,10.7 c5.3,6.4,4.8,13.8-0.5,20.7c-6.3,8.3-15.3,10.9-24.8,11.9C1014.6-33.5,1005.3-33.8,996.7-39.2z M998.1-55.4c3.1,1,5.3,1.5,7.3,2.4 c5.4,2.6,10.6,5.5,16,8.1c3.5,1.7,6.1,0.4,8.1-2.8c2.2-3.5,2.2-6.9-1.5-8.9c-5.6-3.1-11.3-6.1-17.4-8.1 C1004.5-66.8,996.7-61.8,998.1-55.4z"/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M904.2-21.5c2.8-11.5,5.2-24.3,9.2-36.7 c7.4-22.8,15.7-45.4,23.6-68c3.5-10,14.6-15.7,24.7-12.5c1.2,0.4,2.7,3.8,2.2,5.1c-4.4,13.1-9.2,26.1-14,39 c-7.8,21.5-16,42.8-23.5,64.4c-2.7,7.7-3.3,15.6,3.1,22.7c3.5,3.9-0.7,10.2-6.8,11.1c-6.2,0.9-13.1-3.5-15.5-10.6 C905.9-11,905.4-15.5,904.2-21.5z"/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M354.2-65c-4.5,2.9-7.7,6-11.4,7 c-2.6,0.7-6.4-0.7-9-2.3c-3.4-2.1-5.6-2.4-8.4,0.9c-9.4,10.9-15.5,23.2-18.6,37.3c-1.9,8.5-5.8,16.3-12.1,22.4 c-2.4,2.3-6.1,4.1-9.5,4.5c-5.1,0.7-7.1-2.7-5.6-7.6c3.1-10.2,6.4-20.4,9-30.8c1.9-7.8,1.7-15.7-2-23.3c-3.1-6.3-2-8.9,4.2-12.3 c1-0.6,2-1.2,3-1.7c6.8-3.2,7.8-3,13.2,2.3c7.7,7.5,5.1,7.1,14.2,0.9c3.9-2.7,7.7-5.5,11.5-8.4c3.4-2.6,6.7-2.7,9.8,0.1 C346.1-72.7,349.6-69.3,354.2-65z"/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M246.1-73c3.8-0.5,4.7,2.1,3.9,5.7 c-2,8.3-4.4,16.5-6.3,24.8c-2.5,10.7-3.5,21.4,1.9,31.7c1.9,3.7,1.7,6.9-2.5,9c-0.6,0.3-1,0.9-1.5,1.3c-12.9,8.3-18.7,5.8-22.9-8.5 c-5.2-18-2.7-35.8,7.5-51.9C230.5-67.7,236.6-72.6,246.1-73z"/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M252.8-125c7.4-0.1,14.2,6.3,14.2,13.3 c0,6-6.1,11.4-12.7,11.5c-7.6,0-14.2-6.2-14.2-13.6C240.1-119.6,246.1-124.9,252.8-125z"/> <path display="inline" fill="#333333" stroke="#333333" stroke-miterlimit="10" d="M131-119c-4.2-18.5-17.3-28.5-33.7-34.7 c-10.8-4-22.1-6.9-33.4-8.9c-10-1.8-20.4-2.4-30.6-2.1c-10.8,0.4-21.5,2.3-32.2,3.8c-17.4,2.4-34.1,6.7-49.5,15.7 c-15.7,9.1-17.9,24.7-4.8,37.2c7.6,7.3,17.2,11.1,27.2,13.9c10.3,2.9,20.8,4.7,31-0.1c2.8-1.3,5.5-3.2,7.4-5.5 c1.3-1.6,2.5-4.4-1.8-5.3C3-106.8-4.5-109-12-111c-7.7-2-15.7-3.5-21.7-9.3c-5.6-5.4-4.8-13.3,2.3-16.1c7.1-2.8,14.8-4.5,22.4-5.8 c19.7-3.4,39.6-3.9,59.5-1.8c1.4,0.1,3.8,1.6,3.7,2.1c-0.3,1.7-1.2,4.3-2.4,4.7c-5.6,1.8-8,6.2-9.6,11C38-113.8,34-101.4,30.3-89 c-1.2,3.9-2.7,5.7-6.8,4c-2.4-1-4.8-2.2-7.3-2.8c-1.6-0.4-4.1-0.5-5.1,0.4c-4.6,4.1-8.9,8.6-13.8,13.6c4.2,3,7.5,6,11.4,8 c3.9,2,8.2,3.1,12.1,4.5c-2.7,13.6-6,27.1-8,40.8C11.3-9.6,10.9,1.4,15.1,12c5.3,13.3,19.9,16.8,29.5,6.3 c6.1-6.6,10.5-14.6,15.7-22.2C53.5-3.5,48.3-3.2,43.1-3c-3.6,0.1-5.2-2.7-4.8-5.4c2.4-15.5,5.3-30.9,7.9-46.3 c0.8-4.5,3.3-5.6,7.7-5.6c20,0,39.2-3.6,56.9-13.4C127.6-82.9,135.3-100.3,131-119z M94.8-83.6c-9.2,6.4-19.9,9.8-31.3,9.6 c-2.6-0.1-5.2-0.8-8.8-1.3c0.6-3.6,0.6-7.2,1.7-10.3c6.3-16.6,13.1-33.1,19.5-49.7c1.4-3.7,3.5-4.4,6.8-2.6 c12.5,6.8,21.8,16,23.6,31C107.5-96.6,102.3-88.9,94.8-83.6z"/> </g> </svg><img src="./assets/images/logo-black.svg" style="max-width:200px"></div><div class="pace-progress-inner"></div>\n</div>\n<div class="pace-activity"></div>';
        if (targetElement.firstChild != null) {
          targetElement.insertBefore(this.el, targetElement.firstChild);
        } else {
          targetElement.appendChild(this.el);
        }
      }
      return this.el;
    };

    Bar.prototype.finish = function() {
      var el;
      el = this.getElement();
      el.className = el.className.replace('pace-active', '');
      el.className += ' pace-inactive';
      document.body.className = document.body.className.replace('pace-running', '');
      return document.body.className += ' pace-done';
    };

    Bar.prototype.update = function(prog) {
      this.progress = prog;
      return this.render();
    };

    Bar.prototype.destroy = function() {
      try {
        this.getElement().parentNode.removeChild(this.getElement());
      } catch (_error) {
        NoTargetError = _error;
      }
      return this.el = void 0;
    };

    Bar.prototype.render = function() {
      var el, key, progressStr, transform, _j, _len1, _ref2;
      if (document.querySelector(options.target) == null) {
        return false;
      }
      el = this.getElement();
      transform = "translate3d(" + this.progress + "%, 0, 0)";
      
      // Steal this.progress to edit our SVG fill...
      var maxHeightFill = 250; // Max height of our fill
	  $('#SVGID_1_').attr('transform','translate(0,'+  (maxHeightFill - (maxHeightFill/100)*this.progress ) +')');
	  console.log( $('#SVGID_1_') );
	  
	  console.log( maxHeightFill - (maxHeightFill/100)*this.progress ); 
      
      _ref2 = ['webkitTransform', 'msTransform', 'transform'];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        key = _ref2[_j];
        el.children[0].style[key] = transform;
      }
      if (!this.lastRenderedProgress || this.lastRenderedProgress | 0 !== this.progress | 0) {
        el.children[0].setAttribute('data-progress-text', "" + (this.progress | 0) + "%");
        if (this.progress >= 100) {
          progressStr = '99';
        } else {
          progressStr = this.progress < 10 ? "0" : "";
          progressStr += this.progress | 0;
        }
        el.children[0].setAttribute('data-progress', "" + progressStr);
      }
      return this.lastRenderedProgress = this.progress;
    };

    Bar.prototype.done = function() {
      return this.progress >= 100;
    };

    return Bar;

  })();

  Events = (function() {
    function Events() {
      this.bindings = {};
    }

    Events.prototype.trigger = function(name, val) {
      var binding, _j, _len1, _ref2, _results;
      if (this.bindings[name] != null) {
        _ref2 = this.bindings[name];
        _results = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          binding = _ref2[_j];
          _results.push(binding.call(this, val));
        }
        return _results;
      }
    };

    Events.prototype.on = function(name, fn) {
      var _base;
      if ((_base = this.bindings)[name] == null) {
        _base[name] = [];
      }
      return this.bindings[name].push(fn);
    };

    return Events;

  })();

  _XMLHttpRequest = window.XMLHttpRequest;

  _XDomainRequest = window.XDomainRequest;

  _WebSocket = window.WebSocket;

  extendNative = function(to, from) {
    var e, key, _results;
    _results = [];
    for (key in from.prototype) {
      try {
        if ((to[key] == null) && typeof from[key] !== 'function') {
          if (typeof Object.defineProperty === 'function') {
            _results.push(Object.defineProperty(to, key, {
              get: function() {
                return from.prototype[key];
              },
              configurable: true,
              enumerable: true
            }));
          } else {
            _results.push(to[key] = from.prototype[key]);
          }
        } else {
          _results.push(void 0);
        }
      } catch (_error) {
        e = _error;
      }
    }
    return _results;
  };

  ignoreStack = [];

  Pace.ignore = function() {
    var args, fn, ret;
    fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    ignoreStack.unshift('ignore');
    ret = fn.apply(null, args);
    ignoreStack.shift();
    return ret;
  };

  Pace.track = function() {
    var args, fn, ret;
    fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    ignoreStack.unshift('track');
    ret = fn.apply(null, args);
    ignoreStack.shift();
    return ret;
  };

  shouldTrack = function(method) {
    var _ref2;
    if (method == null) {
      method = 'GET';
    }
    if (ignoreStack[0] === 'track') {
      return 'force';
    }
    if (!ignoreStack.length && options.ajax) {
      if (method === 'socket' && options.ajax.trackWebSockets) {
        return true;
      } else if (_ref2 = method.toUpperCase(), __indexOf.call(options.ajax.trackMethods, _ref2) >= 0) {
        return true;
      }
    }
    return false;
  };

  RequestIntercept = (function(_super) {
    __extends(RequestIntercept, _super);

    function RequestIntercept() {
      var monitorXHR,
        _this = this;
      RequestIntercept.__super__.constructor.apply(this, arguments);
      monitorXHR = function(req) {
        var _open;
        _open = req.open;
        return req.open = function(type, url, async) {
          if (shouldTrack(type)) {
            _this.trigger('request', {
              type: type,
              url: url,
              request: req
            });
          }
          return _open.apply(req, arguments);
        };
      };
      window.XMLHttpRequest = function(flags) {
        var req;
        req = new _XMLHttpRequest(flags);
        monitorXHR(req);
        return req;
      };
      try {
        extendNative(window.XMLHttpRequest, _XMLHttpRequest);
      } catch (_error) {}
      if (_XDomainRequest != null) {
        window.XDomainRequest = function() {
          var req;
          req = new _XDomainRequest;
          monitorXHR(req);
          return req;
        };
        try {
          extendNative(window.XDomainRequest, _XDomainRequest);
        } catch (_error) {}
      }
      if ((_WebSocket != null) && options.ajax.trackWebSockets) {
        window.WebSocket = function(url, protocols) {
          var req;
          if (protocols != null) {
            req = new _WebSocket(url, protocols);
          } else {
            req = new _WebSocket(url);
          }
          if (shouldTrack('socket')) {
            _this.trigger('request', {
              type: 'socket',
              url: url,
              protocols: protocols,
              request: req
            });
          }
          return req;
        };
        try {
          extendNative(window.WebSocket, _WebSocket);
        } catch (_error) {}
      }
    }

    return RequestIntercept;

  })(Events);

  _intercept = null;

  getIntercept = function() {
    if (_intercept == null) {
      _intercept = new RequestIntercept;
    }
    return _intercept;
  };

  shouldIgnoreURL = function(url) {
    var pattern, _j, _len1, _ref2;
    _ref2 = options.ajax.ignoreURLs;
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      pattern = _ref2[_j];
      if (typeof pattern === 'string') {
        if (url.indexOf(pattern) !== -1) {
          return true;
        }
      } else {
        if (pattern.test(url)) {
          return true;
        }
      }
    }
    return false;
  };

  getIntercept().on('request', function(_arg) {
    var after, args, request, type, url;
    type = _arg.type, request = _arg.request, url = _arg.url;
    if (shouldIgnoreURL(url)) {
      return;
    }
    if (!Pace.running && (options.restartOnRequestAfter !== false || shouldTrack(type) === 'force')) {
      args = arguments;
      after = options.restartOnRequestAfter || 0;
      if (typeof after === 'boolean') {
        after = 0;
      }
      return setTimeout(function() {
        var stillActive, _j, _len1, _ref2, _ref3, _results;
        if (type === 'socket') {
          stillActive = request.readyState < 2;
        } else {
          stillActive = (0 < (_ref2 = request.readyState) && _ref2 < 4);
        }
        if (stillActive) {
          Pace.restart();
          _ref3 = Pace.sources;
          _results = [];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            source = _ref3[_j];
            if (source instanceof AjaxMonitor) {
              source.watch.apply(source, args);
              break;
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      }, after);
    }
  });

  AjaxMonitor = (function() {
    function AjaxMonitor() {
      var _this = this;
      this.elements = [];
      getIntercept().on('request', function() {
        return _this.watch.apply(_this, arguments);
      });
    }

    AjaxMonitor.prototype.watch = function(_arg) {
      var request, tracker, type, url;
      type = _arg.type, request = _arg.request, url = _arg.url;
      if (shouldIgnoreURL(url)) {
        return;
      }
      if (type === 'socket') {
        tracker = new SocketRequestTracker(request);
      } else {
        tracker = new XHRRequestTracker(request);
      }
      return this.elements.push(tracker);
    };

    return AjaxMonitor;

  })();

  XHRRequestTracker = (function() {
    function XHRRequestTracker(request) {
      var event, size, _j, _len1, _onreadystatechange, _ref2,
        _this = this;
      this.progress = 0;
      if (window.ProgressEvent != null) {
        size = null;
        request.addEventListener('progress', function(evt) {
          if (evt.lengthComputable) {
            return _this.progress = 100 * evt.loaded / evt.total;
          } else {
            return _this.progress = _this.progress + (100 - _this.progress) / 2;
          }
        }, false);
        _ref2 = ['load', 'abort', 'timeout', 'error'];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          event = _ref2[_j];
          request.addEventListener(event, function() {
            return _this.progress = 100;
          }, false);
        }
      } else {
        _onreadystatechange = request.onreadystatechange;
        request.onreadystatechange = function() {
          var _ref3;
          if ((_ref3 = request.readyState) === 0 || _ref3 === 4) {
            _this.progress = 100;
          } else if (request.readyState === 3) {
            _this.progress = 50;
          }
          return typeof _onreadystatechange === "function" ? _onreadystatechange.apply(null, arguments) : void 0;
        };
      }
    }

    return XHRRequestTracker;

  })();

  SocketRequestTracker = (function() {
    function SocketRequestTracker(request) {
      var event, _j, _len1, _ref2,
        _this = this;
      this.progress = 0;
      _ref2 = ['error', 'open'];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        event = _ref2[_j];
        request.addEventListener(event, function() {
          return _this.progress = 100;
        }, false);
      }
    }

    return SocketRequestTracker;

  })();

  ElementMonitor = (function() {
    function ElementMonitor(options) {
      var selector, _j, _len1, _ref2;
      if (options == null) {
        options = {};
      }
      this.elements = [];
      if (options.selectors == null) {
        options.selectors = [];
      }
      _ref2 = options.selectors;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        selector = _ref2[_j];
        this.elements.push(new ElementTracker(selector));
      }
    }

    return ElementMonitor;

  })();

  ElementTracker = (function() {
    function ElementTracker(selector) {
      this.selector = selector;
      this.progress = 0;
      this.check();
    }

    ElementTracker.prototype.check = function() {
      var _this = this;
      if (document.querySelector(this.selector)) {
        return this.done();
      } else {
        return setTimeout((function() {
          return _this.check();
        }), options.elements.checkInterval);
      }
    };

    ElementTracker.prototype.done = function() {
      return this.progress = 100;
    };

    return ElementTracker;

  })();

  DocumentMonitor = (function() {
    DocumentMonitor.prototype.states = {
      loading: 0,
      interactive: 50,
      complete: 100
    };

    function DocumentMonitor() {
      var _onreadystatechange, _ref2,
        _this = this;
      this.progress = (_ref2 = this.states[document.readyState]) != null ? _ref2 : 100;
      _onreadystatechange = document.onreadystatechange;
      document.onreadystatechange = function() {
        if (_this.states[document.readyState] != null) {
          _this.progress = _this.states[document.readyState];
        }
        return typeof _onreadystatechange === "function" ? _onreadystatechange.apply(null, arguments) : void 0;
      };
    }

    return DocumentMonitor;

  })();

  EventLagMonitor = (function() {
    function EventLagMonitor() {
      var avg, interval, last, points, samples,
        _this = this;
      this.progress = 0;
      avg = 0;
      samples = [];
      points = 0;
      last = now();
      interval = setInterval(function() {
        var diff;
        diff = now() - last - 50;
        last = now();
        samples.push(diff);
        if (samples.length > options.eventLag.sampleCount) {
          samples.shift();
        }
        avg = avgAmplitude(samples);
        if (++points >= options.eventLag.minSamples && avg < options.eventLag.lagThreshold) {
          _this.progress = 100;
          return clearInterval(interval);
        } else {
          return _this.progress = 100 * (3 / (avg + 3));
        }
      }, 50);
    }

    return EventLagMonitor;

  })();

  Scaler = (function() {
    function Scaler(source) {
      this.source = source;
      this.last = this.sinceLastUpdate = 0;
      this.rate = options.initialRate;
      this.catchup = 0;
      this.progress = this.lastProgress = 0;
      if (this.source != null) {
        this.progress = result(this.source, 'progress');
      }
    }

    Scaler.prototype.tick = function(frameTime, val) {
      var scaling;
      if (val == null) {
        val = result(this.source, 'progress');
      }
      if (val >= 100) {
        this.done = true;
      }
      if (val === this.last) {
        this.sinceLastUpdate += frameTime;
      } else {
        if (this.sinceLastUpdate) {
          this.rate = (val - this.last) / this.sinceLastUpdate;
        }
        this.catchup = (val - this.progress) / options.catchupTime;
        this.sinceLastUpdate = 0;
        this.last = val;
      }
      if (val > this.progress) {
        this.progress += this.catchup * frameTime;
      }
      scaling = 1 - Math.pow(this.progress / 100, options.easeFactor);
      this.progress += scaling * this.rate * frameTime;
      this.progress = Math.min(this.lastProgress + options.maxProgressPerFrame, this.progress);
      this.progress = Math.max(0, this.progress);
      this.progress = Math.min(100, this.progress);
      this.lastProgress = this.progress;
      return this.progress;
    };

    return Scaler;

  })();

  sources = null;

  scalers = null;

  bar = null;

  uniScaler = null;

  animation = null;

  cancelAnimation = null;

  Pace.running = false;

  handlePushState = function() {
    if (options.restartOnPushState) {
      return Pace.restart();
    }
  };

  if (window.history.pushState != null) {
    _pushState = window.history.pushState;
    window.history.pushState = function() {
      handlePushState();
      return _pushState.apply(window.history, arguments);
    };
  }

  if (window.history.replaceState != null) {
    _replaceState = window.history.replaceState;
    window.history.replaceState = function() {
      handlePushState();
      return _replaceState.apply(window.history, arguments);
    };
  }

  SOURCE_KEYS = {
    ajax: AjaxMonitor,
    elements: ElementMonitor,
    document: DocumentMonitor,
    eventLag: EventLagMonitor
  };

  (init = function() {
    var type, _j, _k, _len1, _len2, _ref2, _ref3, _ref4;
    Pace.sources = sources = [];
    _ref2 = ['ajax', 'elements', 'document', 'eventLag'];
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      type = _ref2[_j];
      if (options[type] !== false) {
        sources.push(new SOURCE_KEYS[type](options[type]));
      }
    }
    _ref4 = (_ref3 = options.extraSources) != null ? _ref3 : [];
    for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
      source = _ref4[_k];
      sources.push(new source(options));
    }
    Pace.bar = bar = new Bar;
    scalers = [];
    return uniScaler = new Scaler;
  })();

  Pace.stop = function() {
    Pace.trigger('stop');
    Pace.running = false;
    bar.destroy();
    cancelAnimation = true;
    if (animation != null) {
      if (typeof cancelAnimationFrame === "function") {
        cancelAnimationFrame(animation);
      }
      animation = null;
    }
    return init();
  };

  Pace.restart = function() {
    Pace.trigger('restart');
    Pace.stop();
    return Pace.start();
  };

  Pace.go = function() {
    var start;
    Pace.running = true;
    bar.render();
    start = now();
    cancelAnimation = false;
    return animation = runAnimation(function(frameTime, enqueueNextFrame) {
      var avg, count, done, element, elements, i, j, remaining, scaler, scalerList, sum, _j, _k, _len1, _len2, _ref2;
      remaining = 100 - bar.progress;
      count = sum = 0;
      done = true;
      for (i = _j = 0, _len1 = sources.length; _j < _len1; i = ++_j) {
        source = sources[i];
        scalerList = scalers[i] != null ? scalers[i] : scalers[i] = [];
        elements = (_ref2 = source.elements) != null ? _ref2 : [source];
        for (j = _k = 0, _len2 = elements.length; _k < _len2; j = ++_k) {
          element = elements[j];
          scaler = scalerList[j] != null ? scalerList[j] : scalerList[j] = new Scaler(element);
          done &= scaler.done;
          if (scaler.done) {
            continue;
          }
          count++;
          sum += scaler.tick(frameTime);
        }
      }
      avg = sum / count;
      bar.update(uniScaler.tick(frameTime, avg));
      if (bar.done() || done || cancelAnimation) {
        bar.update(100);
        Pace.trigger('done');
        return setTimeout(function() {
          bar.finish();
          Pace.running = false;
          return Pace.trigger('hide');
        }, Math.max(options.ghostTime, Math.max(options.minTime - (now() - start), 0)));
      } else {
        return enqueueNextFrame();
      }
    });
  };

  Pace.start = function(_options) {
    extend(options, _options);
    Pace.running = true;
    try {
      bar.render();
    } catch (_error) {
      NoTargetError = _error;
    }
    if (!document.querySelector('.pace')) {
      return setTimeout(Pace.start, 50);
    } else {
      Pace.trigger('start');
      return Pace.go();
    }
  };

  if (typeof define === 'function' && define.amd) {
    define(['pace'], function() {
      return Pace;
    });
  } else if (typeof exports === 'object') {
    module.exports = Pace;
  } else {
    if (options.startOnPageLoad) {
      Pace.start();
    }
  }

}).call(this);
